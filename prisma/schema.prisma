generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Institution {
  id      BigInt   @id @default(autoincrement())
  code    String   @unique
  nameJp  String   @map("name_jp")
  nameEn  String   @map("name_en")
  persons Person[]

  @@map("institution")
}

model Person {
  id            BigInt          @id @default(autoincrement())
  institutionId BigInt          @map("institution_id")
  slug          String          @unique
  nameJp        String          @map("name_jp")
  nameEn        String          @map("name_en")
  role          String
  active        Boolean         @default(true)
  aliases       Alias[]
  articleLinks  ArticlePerson[]
  institution   Institution     @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  @@index([institutionId])
  @@map("person")
}

model Alias {
  id       BigInt @id @default(autoincrement())
  personId BigInt @map("person_id")
  text     String
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId])
  @@map("alias")
}

model Article {
  id            BigInt          @id @default(autoincrement())
  urlOriginal   String          @map("url_original")
  urlNormalized String          @unique @map("url_normalized")
  sourceDomain  String          @map("source_domain")
  title         String
  description   String?
  content       String?
  contentHash   String?         @unique @map("content_hash") @db.VarChar(64)
  imageUrl      String?         @map("image_url")
  publishedAt   DateTime?       @map("published_at") @db.Timestamptz(6)
  fetchedAt     DateTime        @map("fetched_at") @db.Timestamptz(6)
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  persons       ArticlePerson[]
  summary       Summary?

  @@index([publishedAt])
  @@map("article")
}

model ArticlePerson {
  articleId BigInt  @map("article_id")
  personId  BigInt  @map("person_id")
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  person    Person  @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@id([articleId, personId])
  @@map("article_person")
}

model Summary {
  id        BigInt   @id @default(autoincrement())
  articleId BigInt   @unique @map("article_id")
  text      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("summary")
}

model IngestJobRun {
  id         BigInt    @id @default(autoincrement())
  startedAt  DateTime  @map("started_at") @db.Timestamptz(6)
  finishedAt DateTime? @map("finished_at") @db.Timestamptz(6)
  inserted   Int?      @default(0)
  deduped    Int?      @default(0)
  errors     Int?      @default(0)

  @@index([startedAt])
  @@map("ingest_job_run")
}
